//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Unity.FbxSdk {

public class FbxLayerElement : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxLayerElement(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxLayerElement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void SetMappingMode(FbxLayerElement.EMappingMode pMappingMode) {
    GlobalsPINVOKE.FbxLayerElement_SetMappingMode(swigCPtr, (int)pMappingMode);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetReferenceMode(FbxLayerElement.EReferenceMode pReferenceMode) {
    GlobalsPINVOKE.FbxLayerElement_SetReferenceMode(swigCPtr, (int)pReferenceMode);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxLayerElement.EMappingMode GetMappingMode() {
    FbxLayerElement.EMappingMode ret = (FbxLayerElement.EMappingMode)GlobalsPINVOKE.FbxLayerElement_GetMappingMode(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxLayerElement.EReferenceMode GetReferenceMode() {
    FbxLayerElement.EReferenceMode ret = (FbxLayerElement.EReferenceMode)GlobalsPINVOKE.FbxLayerElement_GetReferenceMode(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum EType {
    eUnknown,
    eNormal,
    eBiNormal,
    eTangent,
    eMaterial,
    ePolygonGroup,
    eUV,
    eVertexColor,
    eSmoothing,
    eVertexCrease,
    eEdgeCrease,
    eHole,
    eUserData,
    eVisibility,
    eTextureDiffuse,
    eTextureDiffuseFactor,
    eTextureEmissive,
    eTextureEmissiveFactor,
    eTextureAmbient,
    eTextureAmbientFactor,
    eTextureSpecular,
    eTextureSpecularFactor,
    eTextureShininess,
    eTextureNormalMap,
    eTextureBump,
    eTextureTransparency,
    eTextureTransparencyFactor,
    eTextureReflection,
    eTextureReflectionFactor,
    eTextureDisplacement,
    eTextureDisplacementVector,
    eTypeCount
  }

  public enum EMappingMode {
    eNone,
    eByControlPoint,
    eByPolygonVertex,
    eByPolygon,
    eByEdge,
    eAllSame
  }

  public enum EReferenceMode {
    eDirect,
    eIndex,
    eIndexToDirect
  }

}

}
