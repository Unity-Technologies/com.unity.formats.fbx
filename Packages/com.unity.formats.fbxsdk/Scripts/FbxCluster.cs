//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Unity.FbxSdk {

public class FbxCluster : FbxSubDeformer {
  internal FbxCluster(global::System.IntPtr cPtr, bool ignored) : base(cPtr, ignored) { }

  // override void Dispose() {base.Dispose();}

  public new static FbxCluster Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = GlobalsPINVOKE.FbxCluster_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxCluster ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCluster(cPtr, false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static FbxCluster Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = GlobalsPINVOKE.FbxCluster_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxCluster ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCluster(cPtr, false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetLinkMode(FbxCluster.ELinkMode pMode) {
    GlobalsPINVOKE.FbxCluster_SetLinkMode(swigCPtr, (int)pMode);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxCluster.ELinkMode GetLinkMode() {
    FbxCluster.ELinkMode ret = (FbxCluster.ELinkMode)GlobalsPINVOKE.FbxCluster_GetLinkMode(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetLink(FbxNode pNode) {
    GlobalsPINVOKE.FbxCluster_SetLink(swigCPtr, FbxNode.getCPtr(pNode));
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxNode GetLink() {
    global::System.IntPtr cPtr = GlobalsPINVOKE.FbxCluster_GetLink(swigCPtr);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddControlPointIndex(int pIndex, double pWeight) {
    GlobalsPINVOKE.FbxCluster_AddControlPointIndex(swigCPtr, pIndex, pWeight);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetControlPointIndicesCount() {
    int ret = GlobalsPINVOKE.FbxCluster_GetControlPointIndicesCount(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetControlPointIWCount(int pCount) {
    GlobalsPINVOKE.FbxCluster_SetControlPointIWCount(swigCPtr, pCount);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransformMatrix(FbxAMatrix pMatrix) {
    GlobalsPINVOKE.FbxCluster_SetTransformMatrix(swigCPtr, FbxAMatrix.getCPtr(pMatrix));
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxAMatrix GetTransformMatrix(FbxAMatrix pMatrix) {
    FbxAMatrix ret = new FbxAMatrix(GlobalsPINVOKE.FbxCluster_GetTransformMatrix(swigCPtr, FbxAMatrix.getCPtr(pMatrix)), false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTransformLinkMatrix(FbxAMatrix pMatrix) {
    GlobalsPINVOKE.FbxCluster_SetTransformLinkMatrix(swigCPtr, FbxAMatrix.getCPtr(pMatrix));
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxAMatrix GetTransformLinkMatrix(FbxAMatrix pMatrix) {
    FbxAMatrix ret = new FbxAMatrix(GlobalsPINVOKE.FbxCluster_GetTransformLinkMatrix(swigCPtr, FbxAMatrix.getCPtr(pMatrix)), false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetHashCode(){
      return swigCPtr.Handle.GetHashCode();
  }

  public bool Equals(FbxCluster other) {
    if (object.ReferenceEquals(other, null)) { return false; }
    return this.swigCPtr.Handle.Equals (other.swigCPtr.Handle);
  }

  public override bool Equals(object obj){
    if (object.ReferenceEquals(obj, null)) { return false; }
    /* is obj a subclass of this type; if so use our Equals */
    var typed = obj as FbxCluster;
    if (!object.ReferenceEquals(typed, null)) {
      return this.Equals(typed);
    }
    /* are we a subclass of the other type; if so use their Equals */
    if (typeof(FbxCluster).IsSubclassOf(obj.GetType())) {
      return obj.Equals(this);
    }
    /* types are unrelated; can't be a match */
    return false;
  }

  public static bool operator == (FbxCluster a, FbxCluster b) {
    if (object.ReferenceEquals(a, b)) { return true; }
    if (object.ReferenceEquals(a, null) || object.ReferenceEquals(b, null)) { return false; }
    return a.Equals(b);
  }

  public static bool operator != (FbxCluster a, FbxCluster b) {
    return !(a == b);
  }

  public int GetControlPointIndexAt(int index) {
    int ret = GlobalsPINVOKE.FbxCluster_GetControlPointIndexAt(swigCPtr, index);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetControlPointWeightAt(int index) {
    double ret = GlobalsPINVOKE.FbxCluster_GetControlPointWeightAt(swigCPtr, index);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum ELinkMode {
    eNormalize,
    eAdditive,
    eTotalOne
  }

}

}
