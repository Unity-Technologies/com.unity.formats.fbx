global string $UnityFbxFilePathAttr = "unityFbxModelFilePath";
global string $UnityFbxFileNameAttr = "unityFbxModelFileName";
global string $UnityFbxAnimFilePathAttr = "unityFbxAnimFilePath";
global string $UnityFbxAnimFileNameAttr = "unityFbxAnimFileName";
global string $UnityFbxNamespaceAttr = "unityFbxNamespace";
global string $UnityExportSetNameFormat = "^1s_UnityExportSet";

/* Enum */
global int $UnityExportAnim = 0;
global int $UnityExportModel = 1;
global int $UnityExportModelAnim = 2;

global proc unityRemoveNativeMenuOnLoad(){
    $removeSendToUnityMenu = `optionVar -q "UnityFbxForMaya_removeSendToUnityMenu"`;
    if($removeSendToUnityMenu && `menu -exists "sendToUnityMenu"`){
        //Remove the GamePipeline 'SendToUnity' button
        menu -e -visible false "sendToUnityMenu";
    }
}

// Load a specified settings file
proc int loadUnityFbxSettings(string $fileName, string $settingType){
    // check if the file exists
    if (`file -q -ex $fileName` == false){
        error ("Failed to find Unity Fbx "+$settingType+" Settings at: " + $fileName);
        return false;
    }
    eval ("source \"" + $fileName + "\"");
    return true;
}


// Load the Export Settings from file
proc int loadUnityFbxExportSettings(){
    $fileName = `optionVar -q "UnityFbxExportSettings"`;
    return loadUnityFbxSettings($fileName, "Export");
}


// Load the Import Settings from a file
proc int loadUnityFbxImportSettings(){
    $fileName = `optionVar -q "UnityFbxImportSettings"`;
    return loadUnityFbxSettings($fileName, "Import");
}


proc string getAttribute(string $node, string $attr){
    if (`attributeExists $attr $node`){
        return `getAttr ($node + "." + $attr)`;
    }
    return "";
}


proc storeAttribute(string $node, string $attr, string $attrValue){
    $attrType="string";
    if (!attributeExists($attr, $node)){
        addAttr -shortName $attr -storable true -dataType $attrType $node;
    }
    setAttr ($node+"."+$attr) -type $attrType $attrValue;
}


proc int setExists(string $setName){
    return stringArrayContains($setName, `listSets -allSets`);
}

proc int loadUnityPlugin(string $plugin){
    if (`pluginInfo -q -loaded $plugin` == false){
        loadPlugin $plugin;
        if (`pluginInfo -q -loaded $plugin` == false){
            return false;
        }
    }
    return true;
};

// show a yes/no style dialog, return true if user clicked confirm, false if user canceled
proc int showConfirmDialog(string $title, string $message, string $confirmButtonName, string $cancelButtonName){
    // create a confirm dialog with a yes and no button. Specif
    $response = `confirmDialog -title $title
                      -message $message
                      -button $confirmButtonName
                      -button $cancelButtonName
                      -defaultButton $confirmButtonName
                      -cancelButton $cancelButtonName
                      -dismissString $cancelButtonName`;
                      
    return ( $response == $confirmButtonName );
}

// get the namespace of the given object
proc string getObjectNamespace(string $objectName){
    string $lsResult[] = `ls -showNamespace -an $objectName`;
    return $lsResult[1];
}

proc string getNewNamespace(string $n1, string $n2){
    string $n2Tokens[];
    int $n2NumTokens = `tokenize $n2 ":" $n2Tokens`;
    
    string $newNamespace = ":";
    string $n1BaseName = `namespaceInfo -baseName $n1`;
    
    for($i=$n2NumTokens-1; $i>=0; --$i){
        if($n2Tokens[$i] == $n1BaseName){
            break;
        }
        $n2Tokens[$i] = "";
    }
    $newNamespace = $newNamespace + stringArrayToString($n2Tokens, ":");
    if($newNamespace == ":"){
        return $n2;
    }
    return $newNamespace;
}

proc string checkNamespaceNeedsUpdate(string $unitySet, string $unityFbxNamespace, string $objectNamespace){
    global string $UnityFbxNamespaceAttr;

    string $newNamespace = getNewNamespace($unityFbxNamespace, $objectNamespace);
    if($unityFbxNamespace != $newNamespace){
        // popup asking to change namespace value to new namespace
        if(showConfirmDialog($unitySet,
            "Set namespace has been modified from "+$unityFbxNamespace+" to "+$newNamespace+", update export set namespace attribute?",
            "Yes", "No"
           )){
           storeAttribute($unitySet, $UnityFbxNamespaceAttr, $newNamespace);
           
           return $newNamespace;
        }
    }
    return $unityFbxNamespace;
}

proc importFile(string $filePathStr){
    // get the global variables
    global string $UnityFbxFilePathAttr;
    global string $UnityFbxFileNameAttr;
    global string $UnityFbxAnimFilePathAttr;
    global string $UnityFbxAnimFileNameAttr;
    global string $UnityFbxNamespaceAttr;
    global string $UnityExportSetNameFormat;
    
    $currentDir = dirname($filePathStr);
    $fileName = basename($filePathStr, "");
    $currentAnimDir = "";
    $animFileName = "";
    $fileNameWithoutExt = basename($filePathStr, ".fbx");
    
    $isAnimFile = false;
    if(match("@", basename($filePathStr, ".fbx")) != ""){
        // import as animation
        $isAnimFile = true;
        $currentAnimDir = $currentDir;
        $animFileName = $fileName;
        
        $fileNameWithoutExt = match("[^@]+", $fileNameWithoutExt);
    }
    $fileNameWithoutExt = formValidObjectName($fileNameWithoutExt);
    
    $unityExportSet = `format -stringArg $fileNameWithoutExt $UnityExportSetNameFormat`;

    string $origNamespace = `namespaceInfo -cur -an`;
    string $targetNamespace = ":" + $fileNameWithoutExt;
    // make sure there are no duplicate colons in namespace name
    if($origNamespace != ":"){
        $targetNamespace = `format -s $origNamespace -s $fileNameWithoutExt "^1s:^2s"`;
    }
    
    $setNamespaceExists = false;
    if (setExists($unityExportSet)){
        string $unitySetContents[] = `listConnections $unityExportSet`;
        
        // get namespace from set
        $setNamespace = getAttribute($unityExportSet, $UnityFbxNamespaceAttr);
        if(size($unitySetContents) > 0){
            $setNamespace = checkNamespaceNeedsUpdate($unityExportSet, $setNamespace, getObjectNamespace($unitySetContents[0]));
        }
        
        if($setNamespace != "" && `namespace -exists $setNamespace`){
            $targetNamespace = $setNamespace;
            $setNamespaceExists = true;
        }
    }
    
    // warn if namespace already exists
    if(!$setNamespaceExists){
        if(`namespace -exists $targetNamespace`){
            if(!showConfirmDialog("Warning: " + $fileName,
                $targetNamespace + " namespace already exists, the imported objects will be added to the existing namespace and export set.",
                "Continue", "Cancel"
               )){
                // cancelled, don't import this fbx
                return;
            }
        }
        else{
            namespace -add $targetNamespace;
        }
    }
    
    // Gather everything that is in the scene
    $origItemsInScene = `ls -tr -o -r true`;
        
    // Get or create the Unity Fbx Export Set
    $setCreated = false;
    if (!setExists($unityExportSet)){
        if(!`namespaceInfo -isRootNamespace $origNamespace`){
            namespace -set ":";
        }
        
        // if a set is selected when creating a new set, then
        // the selected set will be added into the new set.
        // avoid this by temporarily deselecting everything.
        $origSelection = `ls -sl`;
        select -clear;
        
        // couldn't find export set so create it
        sets -name $unityExportSet;
        $setCreated = true;
        
        if(size($origSelection) > 0){
            select -r $origSelection;
        }
    }
    
    // unlock set so we can add attributes to it
    lockNode -lock false $unityExportSet;
    
    if(!$isAnimFile){
        // reset attribute values, in case import fails
        storeAttribute($unityExportSet, $UnityFbxFilePathAttr, "");
        storeAttribute($unityExportSet, $UnityFbxFileNameAttr, "");
        storeAttribute($unityExportSet, $UnityFbxNamespaceAttr, "");
    }

    if(`namespaceInfo -cur -an` != $targetNamespace){
        namespace -set $targetNamespace;
    }
    file -import -type "FBX" -ignoreVersion -ra true -mergeNamespacesOnClash true -pr -importFrameRate true -importTimeRange "override" $filePathStr;
    
    if(`namespaceInfo -cur -an` != $origNamespace){
        namespace -set $origNamespace;
    }
    
    if ((!$isAnimFile || ($isAnimFile && $setCreated)) && $currentDir != ""){
        storeAttribute($unityExportSet, $UnityFbxFilePathAttr, $currentDir);
    }
    
    if ((!$isAnimFile || ($isAnimFile && $setCreated)) && $fileName != ""){
        storeAttribute($unityExportSet,$UnityFbxFileNameAttr,$fileName);
    }
    
    if($currentAnimDir != ""){
        storeAttribute($unityExportSet,$UnityFbxAnimFilePathAttr,$currentAnimDir);
    }
    
    if($animFileName != ""){
        storeAttribute($unityExportSet,$UnityFbxAnimFileNameAttr,$animFileName);
    }
    
    if($fileNameWithoutExt != ""){
        storeAttribute($unityExportSet, $UnityFbxNamespaceAttr, $targetNamespace);
    }
    
    if (setExists($unityExportSet) == true){
        // figure out what has been added after import
        $itemsInScene = `ls -tr -o -r true`;
        
        $newItems = stringArrayRemove($origItemsInScene, $itemsInScene);
        
        // add newly imported items to set
        if (size($newItems) > 0){
            sets -include $unityExportSet $newItems;
        }
        // lock set so it doesn't get deleted when empty
        lockNode -lock true $unityExportSet;
    }
}


global proc int loadUnityDependencies(){
    // GamePipeline plugin 'SendToUnitySelection' command used in export
    $pluginsToLoad = {"GamePipeline", "fbxmaya"};
    
    $ext = "mll";
    if (`about -macOS` == true){
        $ext = "bundle";
    }
            
    // iterate over all the plugins, loading them with extenstion ext, and combining the results
    // to return if any of the loads failed
    $result = true;
    for($plugin in $pluginsToLoad){
        $result = $result && `loadUnityPlugin ($plugin + "." + $ext)`;
    }
    
    unityRemoveNativeMenuOnLoad();
    
    return $result;
}

global proc unityImport(){
    if(!loadUnityDependencies()){
        error("Failed to load Unity dependencies");
        return;
    }
    
    if(!loadUnityFbxImportSettings()){
        return;
    }
        
    $unityProject = `optionVar -q "UnityProject"`;
    
    $filePaths = `fileDialog2 -dialogStyle 2 -caption "FBX Import" -dir ($unityProject + "/Assets") -fileFilter "*.fbx" -selectFileFilter "FBX" -fileMode 4`;
    
    // store path and filename
    if(size($filePaths) <= 0){
        return;
    }
    for($i=0; $i<size($filePaths); ++$i){
        $filePathStr = $filePaths[$i];
        importFile($filePathStr);
    }
    
    $currentDir = dirname($filePaths[0]);
    // Change Unity project if fbx is from a different Unity project.
    // Get the project based on the folder structure (i.e. folder above Assets)
    $head = dirname($currentDir);
    $tail = basename($currentDir, "");
    // Check that we are not at the root directory.
    // dirname($head) returns the last directory name in the path, 
    // or head if head is the root directory.
    while ($head != "" && dirname($head) != $head){
        if (`strcmp $tail "Assets"` == 0){
            // this is a valid Unity project, so set it
            optionVar -sv "UnityProject" $head;
            break;
        }
        $head = dirname($head);
        $tail = basename($head, "");
    }
}

// returns the intersection of two string arrays
proc string[] getIntersection(string $set1[], string $set2[]){
    string $myIntersector = `stringArrayIntersector`;
    
    stringArrayIntersector -edit -reset $myIntersector;
    stringArrayIntersector -edit -intersect $set1 $myIntersector;
    stringArrayIntersector -edit -intersect $set2 $myIntersector;
    
    string $intersection[] = `stringArrayIntersector -query $myIntersector`;
    
    // Delete the intersector
    deleteUI $myIntersector;
    
    return $intersection;
}

proc exportSet(string $unitySet, int $exportAnim){
    global string $UnityFbxFilePathAttr;
    global string $UnityFbxFileNameAttr;
    global string $UnityFbxAnimFilePathAttr;
    global string $UnityFbxAnimFileNameAttr;
    global string $UnityFbxNamespaceAttr;

    string $unitySetContents[] = `listConnections $unitySet`;
    string $unityFbxNamespace = getAttribute($unitySet, $UnityFbxNamespaceAttr);    
        
    if(size($unitySetContents) > 0){
        $unityFbxNamespace = checkNamespaceNeedsUpdate($unitySet, $unityFbxNamespace, getObjectNamespace($unitySetContents[0]));
    }
        
    string $animatedObjectSet = "";
    if($exportAnim){
        string $animCurveSelect[] = `ls -typ animCurve`;
        string $animatedTransforms[] = `listConnections -t transform $animCurveSelect`;
        
        string $setAnimatedTransforms[] = getIntersection($animatedTransforms, $unitySetContents);
        
        select -r $setAnimatedTransforms;
        $animatedObjectSet = `sets`;
        select -r -ne $animatedObjectSet;
    }
    else{
        select -r -ne $unitySet;
    }
    
    $pathAttr = $UnityFbxFilePathAttr;
    $nameAttr = $UnityFbxFileNameAttr;
    
    if($exportAnim){
        $pathAttr = $UnityFbxAnimFilePathAttr;
        $nameAttr = $UnityFbxAnimFileNameAttr;
    }
    
    string $unityFbxFilePath = getAttribute($unitySet, $pathAttr);
    string $unityFbxFileName = getAttribute($unitySet, $nameAttr);
    
    $strCmd = "";
    if ($unityFbxFilePath != "" && $unityFbxFileName != ""){
        // export selected, relative to given namespace
        string $exportFormat = "file -force -options \"\" -typ \"FBX export\" -relativeNamespace \"^1s\" -es \"^2s/^3s\"";
        $strCmd = `format -s $unityFbxNamespace -s $unityFbxFilePath -s $unityFbxFileName $exportFormat`;
        eval $strCmd;
    }
    
    if(`objExists $animatedObjectSet`){
       delete $animatedObjectSet; 
    }
}

proc int isUnityExportSet(string $mayaSet){
    global string $UnityFbxFilePathAttr;
    global string $UnityFbxFileNameAttr;

    if(!endsWith($mayaSet, "_UnityExportSet")){
        return false;
    }
    
    if(!`attributeExists $UnityFbxFilePathAttr $mayaSet`){
        return false;
    }
    
    if(!`attributeExists $UnityFbxFileNameAttr $mayaSet`){
        return false;
    }
    return true;
}

proc string[] getUnityExportSets(){
    //if the selection set ends w "_UnityExportSet" and it has at least the custom attributes UnityFbxModelFilePath & UnityFbxModelFileName then it's one of ours.
    string $unityExportSets[];
    
    string $mayaSets[] = `listSets -allSets`;
    
    int $i = 0;
    for($k=0; $k<size($mayaSets); ++$k){
        if(isUnityExportSet($mayaSets[$k])){
            $unityExportSets[$i] = $mayaSets[$k];
            $i++;
        }
    }
    return $unityExportSets;
}

proc unityExport(int $exportType){
    
    if(!loadUnityDependencies()){
        return;
    }
    
    if(!loadUnityFbxExportSettings()){
        return;
    }
    
    $exportAnim = false;
    $exportAnimOnly = false;
    switch($exportType){
    case 0 /* export animation only */:
        $exportAnim = true;
        $exportAnimOnly = true;
        break;
    case 1 /* export model only */:
        break;
    default: /* export model + animation */
        $exportAnim = true;
        break;
    }
    FBXProperty "Export|IncludeGrp|Animation" -v $exportAnim;
    FBXExportAnimationOnly -v $exportAnimOnly;
    
    $origSelection = `ls -sl`;
    if(size($origSelection) <= 0){
        // nothing selected
        return;
    }
    
    $i = 0;
    string $setsToExport[];
    string $unityExportSets[] = getUnityExportSets();
    for($exportSet in $unityExportSets){
        if(!setExists($exportSet)){
            continue;
        }
        
        // TODO (UNI-39197) move functionality to separate mel file
        // check if the selection intersects with this export set
        string $exportSetContents[] = `listConnections $exportSet`; 
        string $intersection[] = getIntersection($origSelection, $exportSetContents);
        
        if(size($intersection) > 0 ||
           stringArrayContains($exportSet, $origSelection)){
            
            $setsToExport[$i] = $exportSet;
            $i++;
        }
    }
    
    // if selection doesn't belong to a set, export to a new file
    if(size($setsToExport) <= 0){
        eval "SendToUnitySelection";
        return;
    }
    
    for($unitySet in $setsToExport){
        print ("exporting set: " + $unitySet);
        exportSet($unitySet, $exportAnimOnly);
    }
    
    select -cl;
    if (size($origSelection) > 0){    
        select -add -ne $origSelection;
    }
}

global proc unityExportAnim(){
    global int $UnityExportAnim;
    unityExport($UnityExportAnim);
}

global proc unityExportModel(){
    global int $UnityExportModel;
    unityExport($UnityExportModel);
}

global proc unityExportModelAnim(){
    global int $UnityExportModelAnim;
    unityExport($UnityExportModelAnim);
}