//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Unity.FbxSdk {

public class FbxGlobalSettings : FbxObject {
  internal FbxGlobalSettings(global::System.IntPtr cPtr, bool ignored) : base(cPtr, ignored) { }

  // override void Dispose() {base.Dispose();}

  public new static FbxGlobalSettings Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = GlobalsPINVOKE.FbxGlobalSettings_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxGlobalSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxGlobalSettings(cPtr, false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static FbxGlobalSettings Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = GlobalsPINVOKE.FbxGlobalSettings_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxGlobalSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxGlobalSettings(cPtr, false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAxisSystem(FbxAxisSystem pAxisSystem) {
    GlobalsPINVOKE.FbxGlobalSettings_SetAxisSystem(swigCPtr, FbxAxisSystem.getCPtr(pAxisSystem));
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxAxisSystem GetAxisSystem() {
    FbxAxisSystem ret = new FbxAxisSystem(GlobalsPINVOKE.FbxGlobalSettings_GetAxisSystem(swigCPtr), true);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSystemUnit(FbxSystemUnit pOther) {
    GlobalsPINVOKE.FbxGlobalSettings_SetSystemUnit(swigCPtr, FbxSystemUnit.getCPtr(pOther));
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxSystemUnit GetSystemUnit() {
    FbxSystemUnit ret = new FbxSystemUnit(GlobalsPINVOKE.FbxGlobalSettings_GetSystemUnit(swigCPtr), true);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAmbientColor(FbxColor pAmbientColor) {
    GlobalsPINVOKE.FbxGlobalSettings_SetAmbientColor(swigCPtr, pAmbientColor);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxColor GetAmbientColor() {
    var ret = GlobalsPINVOKE.FbxGlobalSettings_GetAmbientColor(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetDefaultCamera(string pCameraName) {
    bool ret = GlobalsPINVOKE.FbxGlobalSettings_SetDefaultCamera(swigCPtr, pCameraName);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetDefaultCamera() {
    string ret = GlobalsPINVOKE.FbxGlobalSettings_GetDefaultCamera(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTimeMode(FbxTime.EMode pTimeMode) {
    GlobalsPINVOKE.FbxGlobalSettings_SetTimeMode(swigCPtr, (int)pTimeMode);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxTime.EMode GetTimeMode() {
    FbxTime.EMode ret = (FbxTime.EMode)GlobalsPINVOKE.FbxGlobalSettings_GetTimeMode(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetHashCode(){
      return swigCPtr.Handle.GetHashCode();
  }

  public bool Equals(FbxGlobalSettings other) {
    if (object.ReferenceEquals(other, null)) { return false; }
    return this.swigCPtr.Handle.Equals (other.swigCPtr.Handle);
  }

  public override bool Equals(object obj){
    if (object.ReferenceEquals(obj, null)) { return false; }
    /* is obj a subclass of this type; if so use our Equals */
    var typed = obj as FbxGlobalSettings;
    if (!object.ReferenceEquals(typed, null)) {
      return this.Equals(typed);
    }
    /* are we a subclass of the other type; if so use their Equals */
    if (typeof(FbxGlobalSettings).IsSubclassOf(obj.GetType())) {
      return obj.Equals(this);
    }
    /* types are unrelated; can't be a match */
    return false;
  }

  public static bool operator == (FbxGlobalSettings a, FbxGlobalSettings b) {
    if (object.ReferenceEquals(a, b)) { return true; }
    if (object.ReferenceEquals(a, null) || object.ReferenceEquals(b, null)) { return false; }
    return a.Equals(b);
  }

  public static bool operator != (FbxGlobalSettings a, FbxGlobalSettings b) {
    return !(a == b);
  }

}

}
