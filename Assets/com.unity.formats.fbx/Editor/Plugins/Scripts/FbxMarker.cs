//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Unity.FbxSdk {

public class FbxMarker : FbxNodeAttribute {
  internal FbxMarker(global::System.IntPtr cPtr, bool ignored) : base(cPtr, ignored) { }

  // override void Dispose() {base.Dispose();}

  public new static FbxMarker Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = GlobalsPINVOKE.FbxMarker_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMarker(cPtr, false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static FbxMarker Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = GlobalsPINVOKE.FbxMarker_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMarker(cPtr, false);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reset() {
    GlobalsPINVOKE.FbxMarker_Reset(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMarkerType(FbxMarker.EType pType) {
    GlobalsPINVOKE.FbxMarker_SetMarkerType(swigCPtr, (int)pType);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxMarker.EType GetMarkerType() {
    FbxMarker.EType ret = (FbxMarker.EType)GlobalsPINVOKE.FbxMarker_GetMarkerType(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDefaultOcclusion() {
    double ret = GlobalsPINVOKE.FbxMarker_GetDefaultOcclusion(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDefaultOcclusion(double pOcclusion) {
    GlobalsPINVOKE.FbxMarker_SetDefaultOcclusion(swigCPtr, pOcclusion);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetDefaultIKReachTranslation() {
    double ret = GlobalsPINVOKE.FbxMarker_GetDefaultIKReachTranslation(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDefaultIKReachTranslation(double pIKReachTranslation) {
    GlobalsPINVOKE.FbxMarker_SetDefaultIKReachTranslation(swigCPtr, pIKReachTranslation);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetDefaultIKReachRotation() {
    double ret = GlobalsPINVOKE.FbxMarker_GetDefaultIKReachRotation(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDefaultIKReachRotation(double pIKReachRotation) {
    GlobalsPINVOKE.FbxMarker_SetDefaultIKReachRotation(swigCPtr, pIKReachRotation);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetDefaultIKPull() {
    double ret = GlobalsPINVOKE.FbxMarker_GetDefaultIKPull(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDefaultIKPull(double pIKPull) {
    GlobalsPINVOKE.FbxMarker_SetDefaultIKPull(swigCPtr, pIKPull);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetDefaultIKPullHips() {
    double ret = GlobalsPINVOKE.FbxMarker_GetDefaultIKPullHips(swigCPtr);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDefaultIKPullHips(double pIKPullHips) {
    GlobalsPINVOKE.FbxMarker_SetDefaultIKPullHips(swigCPtr, pIKPullHips);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxPropertyMarkerELook Look {
    get {
      FbxPropertyMarkerELook ret = new FbxPropertyMarkerELook(GlobalsPINVOKE.FbxMarker_Look_get(swigCPtr), false);
      if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxPropertyBool DrawLink {
    get {
      FbxPropertyBool ret = new FbxPropertyBool(GlobalsPINVOKE.FbxMarker_DrawLink_get(swigCPtr), false);
      if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxPropertyDouble Size {
    get {
      FbxPropertyDouble ret = new FbxPropertyDouble(GlobalsPINVOKE.FbxMarker_Size_get(swigCPtr), false);
      if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxPropertyBool ShowLabel {
    get {
      FbxPropertyBool ret = new FbxPropertyBool(GlobalsPINVOKE.FbxMarker_ShowLabel_get(swigCPtr), false);
      if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxPropertyDouble3 IKPivot {
    get {
      FbxPropertyDouble3 ret = new FbxPropertyDouble3(GlobalsPINVOKE.FbxMarker_IKPivot_get(swigCPtr), false);
      if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxProperty GetOcclusion() {
    FbxProperty ret = new FbxProperty(GlobalsPINVOKE.FbxMarker_GetOcclusion(swigCPtr), true);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxProperty GetIKReachTranslation() {
    FbxProperty ret = new FbxProperty(GlobalsPINVOKE.FbxMarker_GetIKReachTranslation(swigCPtr), true);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxProperty GetIKReachRotation() {
    FbxProperty ret = new FbxProperty(GlobalsPINVOKE.FbxMarker_GetIKReachRotation(swigCPtr), true);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxProperty GetIKPull() {
    FbxProperty ret = new FbxProperty(GlobalsPINVOKE.FbxMarker_GetIKPull(swigCPtr), true);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxProperty GetIKPullHips() {
    FbxProperty ret = new FbxProperty(GlobalsPINVOKE.FbxMarker_GetIKPullHips(swigCPtr), true);
    if (GlobalsPINVOKE.SWIGPendingException.Pending) throw GlobalsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetHashCode(){
      return swigCPtr.Handle.GetHashCode();
  }

  public bool Equals(FbxMarker other) {
    if (object.ReferenceEquals(other, null)) { return false; }
    return this.swigCPtr.Handle.Equals (other.swigCPtr.Handle);
  }

  public override bool Equals(object obj){
    if (object.ReferenceEquals(obj, null)) { return false; }
    /* is obj a subclass of this type; if so use our Equals */
    var typed = obj as FbxMarker;
    if (!object.ReferenceEquals(typed, null)) {
      return this.Equals(typed);
    }
    /* are we a subclass of the other type; if so use their Equals */
    if (typeof(FbxMarker).IsSubclassOf(obj.GetType())) {
      return obj.Equals(this);
    }
    /* types are unrelated; can't be a match */
    return false;
  }

  public static bool operator == (FbxMarker a, FbxMarker b) {
    if (object.ReferenceEquals(a, b)) { return true; }
    if (object.ReferenceEquals(a, null) || object.ReferenceEquals(b, null)) { return false; }
    return a.Equals(b);
  }

  public static bool operator != (FbxMarker a, FbxMarker b) {
    return !(a == b);
  }

  public new enum EType {
    eStandard,
    eOptical,
    eEffectorFK,
    eEffectorIK
  }

  public enum ELook {
    eCube,
    eHardCross,
    eLightCross,
    eSphere,
    eCapsule,
    eBox,
    eBone,
    eCircle,
    eSquare,
    eStick,
    eNone
  }

}

}
